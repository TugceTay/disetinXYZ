// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using son;

#nullable disable

namespace son.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("son.Models.AlosClip", b =>
                {
                    b.Property<int>("Rid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Rid"));

                    b.Property<byte[]>("Rast")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("rast");

                    b.HasKey("Rid");

                    b.ToTable("alos_clip", (string)null);
                });

            modelBuilder.Entity("son.Models.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Blok")
                        .HasColumnType("text");

                    b.Property<string>("Nitelik")
                        .HasColumnType("text");

                    b.Property<int?>("fKey")
                        .HasColumnType("integer");

                    b.Property<MultiPolygon>("geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("son.Models.FaultLine", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_0");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<long?>("FaultId")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<Geometry>("Geom")
                        .HasColumnType("geometry")
                        .HasColumnName("geom");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("ad");

                    b.HasKey("Id");

                    b.ToTable("fay", (string)null);
                });

            modelBuilder.Entity("son.Models.Parcel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Ada")
                        .HasColumnType("integer");

                    b.Property<string>("Pafta")
                        .HasColumnType("text");

                    b.Property<int?>("ParselNo")
                        .HasColumnType("integer");

                    b.Property<MultiPolygon>("geom")
                        .HasColumnType("geometry");

                    b.Property<string>("il")
                        .HasColumnType("text");

                    b.Property<string>("ilce")
                        .HasColumnType("text");

                    b.Property<string>("mahalle")
                        .HasColumnType("text");

                    b.Property<string>("nitelik")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Parcels");
                });

            modelBuilder.Entity("son.Models.RasterTable", b =>
                {
                    b.Property<int>("Rid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Rid"));

                    b.Property<byte[]>("Rast")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("rast");

                    b.HasKey("Rid");

                    b.ToTable("raster_table", (string)null);
                });

            modelBuilder.Entity("son.Models.Wetland", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_0");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Geometry>("Geom")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("geom");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ad");

                    b.Property<long>("WetlandId")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("wetlands", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
